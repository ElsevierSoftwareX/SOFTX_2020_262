
classdef params_cl
    properties
        Time double
        PingNumber uint32
        BandWidth double
        ChannelMode int8
        Frequency double
        FrequencyEnd double
        FrequencyStart double
        PulseForm int8
        PulseLength double
        TeffPulseLength double
        TeffCompPulseLength double
        SampleInterval double
        Slope double        
        TransmitPower double
        Absorption double
    end
    methods
        function obj=params_cl(varargin)
            if isempty(varargin)
                return;
            else
                props=properties(obj);
                for jj=1:length(props)
                    if iscell(obj.(props{jj}))
                        obj.(props{jj})=cell(1,varargin{1});
                        obj.(props{jj})(:)={''};
                    else
                        obj.(props{jj})=zeros(1,varargin{1});
                    end
                end
                obj.PingNumber=1:varargin{1};
            end
            
        end
        
        function obj_red=reduce_params(obj)
            obj_red=params_cl();
            [params_groups,...
                obj_red.BandWidth,...
                obj_red.ChannelMode,...
                obj_red.Frequency,...
                obj_red.FrequencyEnd,...
                obj_red.FrequencyStart,...
                obj_red.PulseForm,...
                obj_red.PulseLength,...
                obj_red.TeffCompPulseLength,...
                obj_red.SampleInterval,...
                obj_red.Slope,...
                obj_red.TransmitPower,...
                obj_red.Absorption...
                ]=findgroups(...
                obj.BandWidth,...
                obj.ChannelMode,...
                obj.Frequency,...
                obj.FrequencyEnd,...
                obj.FrequencyStart,...
                obj.PulseForm,...
                obj.PulseLength,...
                obj.TeffCompPulseLength,...
                obj.SampleInterval,...
                obj.Slope,...
                obj.TransmitPower,...
                obj.Absorption);
            
            obj_red.PingNumber = splitapply(@nanmin,obj.PingNumber,params_groups);
            obj_red.Time = splitapply(@nanmin,obj.Time,params_groups);
        end
        
        
        
        function params_out=concatenate_Params(param_1,param_2,nb_p1,nb_p2)
            
            if param_1.Time(1)>param_2.Time(end)
                param_start=param_2;
                param_end=param_1;
                nb_p=nb_p2;
            else
                param_start=param_1;
                param_end=param_2;
                nb_p=nb_p1;
            end
            
            props=properties(param_1);
            params_out=params_cl(length(param_1.Time)+length(param_2.Time));
            
            for jj=1:length(props)
                params_out.(props{jj})=[param_start.(props{jj})(:)' param_end.(props{jj})(:)'];
            end
            params_out.PingNumber = [params_start.PingNumber params_end.PingNumber+nb_p];
            
        end
        function param_str=param2str(param_obj,idx_ping)
            
            fields={'BandWidth',...
                'ChannelMode',...
                'Frequency',...
                'FrequencyStart',...
                'FrequencyEnd',...
                'PulseForm',...
                'PulseLength',...
                'TeffPulseLength',...
                'TeffCompPulseLength',...
                'SampleInterval',...
                'Slope',...
                'TransmitPower',...
                'Absorption'};
            
               fact=[1/1e3; ...%'BandWidth',...
                0; ...%'ChannelMode',...
                1/1e3; ...%'Frequency',...
                1/1e3; ...%'FrequencyStart',...
                1/1e3; ...%'FrequencyEnd',...
                 1; %'PulseForm',...
                1e3; ... %'PulseLength',...
                 1e3; ... %'TeffPulseLength',...
                  1e3; ... %'TeffCompPulseLength',...
                1e3; ... %'SampleInterval',...
                1; %'Slope',...
                1/1e3; ...%'TransmitPower',...
                1e3 ...%'Absorption'
                ];
            
            
            fields_name={'BandWidth',...
                'ChannelMode',...
                'Nominal Frequency',...
                'FrequencyStart',...
                'FrequencyEnd',...
                'PulseForm',...
                'PulseLength',...
                'PulseLength Eff',...
                'PulseLength Comp Eff',...
                'SampleInterval',...
                'Slope',...
                'TransmitPower',...
                'Absorption'};
            
            fields_fmt={'%.2f kHz',...
                '%d',...
                '%d kHz',...
                '%d kHz',...
                '%d kHz',...
                '%d',...
                '%.3f ms',...
                 '%.3f ms',...
                 '%.3f ms',...
                '%.3f ms',...
                '%.6f',....
                '%.2f kW',...
                '%.2f dB/km'};
            
            
            param_str =sprintf('<html><ul>Parameters for ping %d:',idx_ping);
            
            id=find(idx_ping,param_obj.PingNumber>0,1,'last');
            
            for ifi=1:length(fields)
                
                if length(param_obj.(fields{ifi}))<=id
                    id=1;
                end

                if iscell(param_obj.(fields{ifi}))
                    str_temp=sprintf(fields_fmt{ifi},param_obj.(fields{ifi}){id});
                else
                    if isnan(param_obj.(fields{ifi})(id))
                        continue;
                    end
                    str_temp=sprintf(fields_fmt{ifi},fact(ifi)*param_obj.(fields{ifi})(id));
                end
                
                param_str = [param_str '<li><i>' fields_name{ifi} ': </i>' str_temp '</li>'];
            end
            param_str = [param_str '</ul></html>'];
        end
        
        
           
        function params_section=get_params_idx_section(params_obj,idx)          
            params_section=params_obj;
            
            props=properties(params_obj);
            
            for iprop=1:length(props)
                if ~strcmpi(props{iprop},'PingNumber')
                params_section.(props{iprop})= params_obj.(props{iprop})(ismember(idx,params_obj.PingNumber));
                end   
            end
            params_section.PingNumber=find(ismember(idx,params_obj.PingNumber));
            
        end
        
        
        
        
        function delete(obj)
            if ~isdeployed
                c = class(obj);
                disp(['ML object destructor called for class ',c])
            end
        end
    end
    
end




