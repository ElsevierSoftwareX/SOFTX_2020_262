
classdef params_cl
    properties
        Time double
        PingNumber uint32
        BandWidth double
        ChannelMode int8
        Frequency double
        FrequencyEnd double
        FrequencyStart double
        PulseForm int8
        PulseLength double
        TeffPulseLength double
        TeffCompPulseLength double
        SampleInterval double
        Slope double        
        TransmitPower double
    end
    
    methods
        function obj=params_cl(varargin)
            p = inputParser;
            
            addOptional(p,'nb_pings',1,@(x) x>0);

            parse(p,varargin{:});
            
            props=properties(obj);
            for jj=1:length(props) 
                obj.(props{jj})=zeros(1,p.Results.nb_pings);
            end
            
            obj.PingNumber=1:p.Results.nb_pings;
            
        end
        
        function obj_red=reduce_params(obj)
            if isempty(obj.PingNumber)
                obj_red=obj;
                return;
            end
            
            obj_red=params_cl();
            
            [params_groups,...
                obj_red.BandWidth,...
                obj_red.ChannelMode,...
                obj_red.Frequency,...
                obj_red.FrequencyEnd,...
                obj_red.FrequencyStart,...
                obj_red.PulseForm,...
                obj_red.PulseLength,...
                obj_red.TeffPulseLength,...
                obj_red.TeffCompPulseLength,...
                obj_red.SampleInterval,...
                obj_red.Slope,...
                obj_red.TransmitPower...
                ]=findgroups(...
                obj.BandWidth,...
                obj.ChannelMode,...
                obj.Frequency,...
                obj.FrequencyEnd,...
                obj.FrequencyStart,...
                obj.PulseForm,...
                obj.PulseLength,...
                obj.TeffPulseLength,...
                obj.TeffCompPulseLength,...
                obj.SampleInterval,...
                obj.Slope,...
                obj.TransmitPower);
            
            obj_red.PingNumber = splitapply(@nanmin,obj.PingNumber,params_groups);
            obj_red.Time = splitapply(@nanmin,obj.Time,params_groups);
        end
        
        
        
        function params_out=concatenate_Params(param_start,param_end,nb_p)
                    
            props=properties(param_start);

            params_out=params_cl(numel(param_start.PingNumber)+numel(param_end.PingNumber));
            
            for jj=1:length(props)
                params_out.(props{jj})=[param_start.(props{jj}) param_end.(props{jj})];
            end
            
            params_out.PingNumber = [param_start.PingNumber param_end.PingNumber+nb_p];
            
        end
        function param_str=param2str(param_obj,idx_ping)
            
            fields={'BandWidth',...
                'ChannelMode',...
                'Frequency',...
                'FrequencyStart',...
                'FrequencyEnd',...
                'PulseForm',...
                'PulseLength',...
                'TeffPulseLength',...
                'TeffCompPulseLength',...
                'SampleInterval',...
                'Slope',...
                'TransmitPower'};
            
               fact=[1/1e3; ...%'BandWidth',...
                0; ...%'ChannelMode',...
                1/1e3; ...%'Frequency',...
                1/1e3; ...%'FrequencyStart',...
                1/1e3; ...%'FrequencyEnd',...
                 1; %'PulseForm',...
                1e3; ... %'PulseLength',...
                 1e3; ... %'TeffPulseLength',...
                  1e3; ... %'TeffCompPulseLength',...
                1e3; ... %'SampleInterval',...
                1; %'Slope',...
                1/1e3; ...%'TransmitPower'
                ];
            
            
            fields_name={'BandWidth',...
                'ChannelMode',...
                'Nominal Frequency',...
                'FrequencyStart',...
                'FrequencyEnd',...
                'PulseForm',...
                'PulseLength',...
                'PulseLength Eff',...
                'PulseLength Comp Eff',...
                'SampleInterval',...
                'Slope',...
                'TransmitPower'};
            
            fields_fmt={'%.2f kHz',...
                '%d',...
                '%d kHz',...
                '%d kHz',...
                '%d kHz',...
                '%d',...
                '%.3f ms',...
                 '%.3f ms',...
                 '%.3f ms',...
                '%.3f ms',...
                '%.6f',....
                '%.2f kW'};
                        
            param_str =sprintf('<html><ul>Parameters for ping %d:',idx_ping);
            
            id=find(idx_ping-param_obj.PingNumber>0,1,'last');
            
            for ifi=1:length(fields)
                
                if size(param_obj.(fields{ifi}),2)<=id
                    id=1;
                end
  
                if isnan(param_obj.(fields{ifi})(id))
                    continue;
                end
                
                str_temp=sprintf(fields_fmt{ifi},fact(ifi)*param_obj.(fields{ifi})(id));
                                
                param_str = [param_str '<li><i>' fields_name{ifi} ': </i>' str_temp '</li>'];
            end
            param_str = [param_str '</ul></html>'];
        end
        
        
           
        function params_section=get_params_idx_section(params_obj,idx)          
            params_section=params_obj;
            
            props=properties(params_obj);
            id_sec=ismember(idx,params_obj.PingNumber);
            
            if any(id_sec)
                id_num=find(id_sec);
            else
                id_sec=numel(params_obj.PingNumber);
                id_num=1;
            end
             
            for iprop=1:length(props)
                if ~strcmpi(props{iprop},'PingNumber')
                        params_section.(props{iprop})= params_obj.(props{iprop})(:,id_sec);
                end   
            end
            params_section.PingNumber=find(id_num);
   
        end
        
        
        
        
        function delete(obj)
            if ~isdeployed
                c = class(obj);
                disp(['ML object destructor called for class ',c])
            end
        end
    end
    
end




